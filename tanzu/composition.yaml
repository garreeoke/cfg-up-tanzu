apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xsvcbindings.tap.upbound.io
spec:
  compositeTypeRef:
    apiVersion: tap.upbound.io/v1alpha1
    kind: XSvcBinding
  writeConnectionSecretsToNamespace: tap-workloads
  resources:
    # Calling broker here until provisioner works with upbound cloud
    - base:
        apiVersion: tap.upbound.io/v1alpha1
        kind: AwsBrokerMq
      name: broker
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.id
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.part-of
          toFieldPath: spec.part-of
        - fromFieldPath: spec.region
          toFieldPath: spec.region
        - fromFieldPath: spec.engineVersion
          toFieldPath: spec.engineVersion
        - fromFieldPath: spec.tapK8ProviderCfg
          toFieldPath: spec.tapK8ProviderCfg
        - fromFieldPath: spec.claimRef.namespace #metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: metadata.namespace
        #- fromFieldPath: spec.claimRef.namespace
        #  toFieldPath: spec.writeConnectionSecretToRef.namespace
        #- fromFieldPath: spec.id
        #  toFieldPath: spec.writeConnectionSecretToRef.name
        #  transforms:
        #    - type: string
        #      string:
        #        fmt: "%s-connection"
      connectionDetails:
        - fromConnectionSecretKey: type
        - fromConnectionSecretKey: addresses
        - fromConnectionSecretKey: virtual-host
        - fromConnectionSecretKey: username
        - fromConnectionSecretKey: password
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: services.apps.tanzu.vmware.com/v1alpha1
              kind: ClusterInstanceClass
              spec:
                description:
                  short: "Generic cluster instance class description"
                # Added below to work around until provisioner supports class claims with non-CRDs
                pool:
                  kind: Secret
                  fieldSelector: type=connection.crossplane.io/v1alpha1
      name: cluster-instance-class
      patches:
        - fromFieldPath: spec.tapK8ProviderCfg
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-clusterinstanceclass"
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.name
        - fromFieldPath: spec.instanceClassDescription
          toFieldPath: spec.forProvider.manifest.spec.description.short
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.spec.pool.labelSelector.matchLabels["services.apps.tanzu.vmware.com/class"]
        # Commented out below would be used when provisoner works.
        #- fromFieldPath: spec.xrd
        #  toFieldPath: spec.forProvider.manifest.spec.provisioner.crossplane.compositeResourceDefinition
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRole
              metadata:
                labels:
                  apps.tanzu.vmware.com/aggregate-to-app-operator-cluster-access: "true"
              rules:
                - apiGroups:
                  - "services.apps.tanzu.vmware.com"
                  resources:
                  - clusterinstanceclasses
                  verbs:
                  - claim
                  resourceNames: []
      name: classInstanceRole
      patches:
        - fromFieldPath: spec.tapK8ProviderCfg
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.name
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-clusterrole"
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.rules[0].resourceNames[0]
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: services.apps.tanzu.vmware.com/v1alpha1
              kind: ResourceClaim
              spec:
                ref:
                  apiVersion: v1
                  kind: Secret
      name: resource-claim
      patches:
        - fromFieldPath: spec.tapK8ProviderCfg
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-resourceclaim"
        - fromFieldPath: spec.claimRef.namespace #metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.name
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.spec.ref.name
          transforms:
            - type: string
              string:
                fmt: "%s-connection"
    # Will use classclaim when provisioner supports upbound cloud
    #- base:
    #    apiVersion: kubernetes.crossplane.io/v1alpha1
    #    kind: Object
    #    spec:
    #      forProvider:
    #        manifest:
    #          apiVersion: services.apps.tanzu.vmware.com/v1alpha1
    #          kind: ClassClaim
    #  name: resource-demo
    #  patches:
    #    - fromFieldPath: spec.tapK8ProviderCfg
    #      toFieldPath: spec.providerConfigRef.name
    #    - fromFieldPath: spec.id
    #      toFieldPath: spec.forProvider.manifest.metadata.name
    #    - fromFieldPath: spec.id
    #      toFieldPath: spec.forProvider.manifest.spec.classRef.name
    #    - fromFieldPath: spec.id
    #      toFieldPath: spec.forProvider.manifest.spec.parameters.id
    #    - fromFieldPath: spec.region
    #      toFieldPath: spec.forProvider.manifest.spec.parameters.region
    #    - fromFieldPath: spec.engineVersion
    #      toFieldPath: spec.forProvider.manifest.spec.parameters.engineVersion
    #    - fromFieldPath: spec.tapK8ProviderCfg
    #      toFieldPath: spec.forProvider.manifest.spec.parameters.tapK8ProviderCfg
    #    - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
    #      toFieldPath: spec.forProvider.manifest.metadata.namespace